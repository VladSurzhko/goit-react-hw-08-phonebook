{"version":3,"file":"static/js/847.65d50ddb.chunk.js","mappings":"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","sources":["components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","pages/ContactPage.jsx"],"sourcesContent":["import { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contactSlice';\nimport { selectFilterContact } from 'redux/selectors';\nimport css from \"../Phonebook/phonestyle.module.css\";\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(selectFilterContact);\n \n\n  return (\n    \n    <ul className={css.llist}>\n        {contacts.map(contact => (\n          <li className={css.item} key={contact.id}>\n            {contact.name}: {contact.number}\n            {(\n                <button\n                  className={css.bbtn}\n                  type=\"button\"\n                  onClick={() => dispatch(deleteContact(contact.id))}\n                >\n                  Delete\n                </button>\n              \n            )}\n          </li>\n        ))}\n      </ul>\n      \n  );\n};\n\n\n// import React from \"react\";\n// import css from \"../Phonebook/phonestyle.module.css\";\n\n// // import { useSelector } from \"react-redux/es/hooks/useSelector\";\n// import { useDispatch } from \"react-redux\";\n// import { deleteContact } from \"redux/creatThunk\";\n\n\n// const ContactList = ({contacts, filter}) => {\n\n//   const dispatch = useDispatch();\n\n\n//   const handleDeleteContact = (contactId) => {\n//     dispatch(deleteContact(contactId));\n//   };\n\n//   const filteredContacts = contacts.filter((contact) =>\n//     contact.name.toLowerCase().includes(filter.toLowerCase())\n//   );\n\n//   return (\n//     <ul className={css.lists}>\n//       {filteredContacts.map((contact) => (\n//         <li className={css.items} key={contact.id}>\n//           {contact.name}: {contact.number}\n//           <button\n//             className={css.btnDelete}\n//             onClick={() => handleDeleteContact(contact.id)}\n//           >\n//             delete\n//           </button>\n//         </li>\n//       ))}\n//     </ul>\n//   );\n// };\n\n// export default ContactList;\n\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addContact } from \"redux/contactSlice\";\nimport { selectContacts } from \"redux/selectors\";\n\n\nimport css from \"../Phonebook/phonestyle.module.css\";\n\n const ContactForm = () => {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  \n  \n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    const isDuplicateContact = contacts.some(\n      (contact) => contact.name === name || contact.number === number\n    );\n\n    if (isDuplicateContact) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n\n    dispatch(addContact({name, number}));\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n\n  \n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    if (name === \"name\") {\n    setName(value);\n  } else if (name === \"number\") {\n    setNumber(value);\n    }\n};\n\n\n    return (\n      <form className={css.pform} onSubmit={handleSubmit}>\n        <label className={css.contact} htmlFor=\"nameInput\">\n          Name\n          <input\n            className={css.cont}\n            id=\"nameInput\"\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={handleInputChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n        <label className={css.contact} htmlFor=\"numberInput\">\n          Number\n          <input\n            className={css.cont}\n            id=\"numberInput\"\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={handleInputChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n          </label>\n        <button className={css.btn} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n    }\n \n  \n\nexport default ContactForm;\n\n\n\n\n\n// import React, { Component } from \"react\";\n// //import { nanoid } from \"nanoid\";\n// import css from \"../Phonebook/phonestyle.module.css\";\n\n\n\n// class ContactForm extends Component {\n//   state = {\n//     name: \"\",\n//     number: \"\"\n//   };\n\n//   handleSubmit = (event) => {\n//     event.preventDefault();\n//     const { name, number } = this.state;\n//     this.props.onAddContact(name, number);\n//     this.setState({ name: \"\", number: \"\" });\n//   };\n\n//   handleInputChange = (event) => {\n//     const { name, value } = event.target;\n//     this.setState({ [name]: value });\n//   };\n\n//   render() {\n//     const { name, number } = this.state;\n\n//     return (\n//       <form className={css.pform} onSubmit={this.handleSubmit}>\n//         <label className={css.contact} htmlFor=\"nameInput\">\n//           Name\n//           <input\n//             className={css.cont}\n//             id=\"nameInput\"\n//             type=\"text\"\n//             name=\"name\"\n//             value={name}\n//             onChange={this.handleInputChange}\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//             required\n//           />\n//         </label>\n//         <label className={css.contact} htmlFor=\"numberInput\">\n//           Number\n//           <input\n//             className={css.cont}\n//             id=\"numberInput\"\n//             type=\"tel\"\n//             name=\"number\"\n//             value={number}\n//             onChange={this.handleInputChange}\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//             required\n//           />\n//         </label>\n//         <button className={css.btn} type=\"submit\">\n//           Add contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n\n\n\n\n\n\n\n\n// const ContactForm = ({ name, number, onInputChange, onAddContact }) => {\n//   const handleSubmit = (event) => {\n//   event.preventDefault();\n//   onAddContact(event);\n// };\n\n//   return (\n//     <form className={css.form} onSubmit={handleSubmit}>\n//       <label className={css.contact} htmlFor=\"nameInput\">\n//         Name\n//         <input\n//           className={css.cont}\n//           id=\"nameInput\"\n//           type=\"text\"\n//           name=\"name\"\n//           value={name}\n//           onChange={onInputChange}\n//           pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//           title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//           required\n//         />\n//       </label>\n//       <label className={css.contact} htmlFor=\"numberInput\">\n//         Number\n//         <input\n//           className={css.cont}\n//           id=\"numberInput\"\n//           type=\"tel\"\n//           name=\"number\"\n//           value={number}\n//           onChange={onInputChange}\n//           pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//           title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//           required\n//         />\n//       </label>\n//       <button className={css.btn} type=\"submit\">\n//         Add contact\n//       </button>\n//     </form>\n//   );\n// };\n\n// export default ContactForm;\n\n","import React from \"react\";\nimport css from '../Phonebook/phonestyle.module.css'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from \"redux/selectors\";\nimport { filterUser } from \"redux/filterSlice\";\n\n\n\nexport const Filter = () => {\n  const dispatch = useDispatch()\n\n  const changeFilter = event => {\n    dispatch(filterUser(event.currentTarget.value));\n  };\n\n   const value = useSelector(selectFilter)\n\n  return (\n    \n    <label className={css.clabel} htmlFor=\"filterInput\">\n      Find contacts by name:\n      <input\n        className={css.cinput}\n        id=\"filterInput\"\n        type=\"text\"\n        name=\"filter\"\n        value={value}\n        onChange={changeFilter}\n      />\n    </label>\n    \n  );\n};","import { ContactList } from '../components/ContactList/ContactList'\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectContacts,\n} from '../redux/selectors';\nimport { fetchContacts } from 'redux/contactSlice';\nimport ContactForm from '../components/ContactForm/ContactForm'; \nimport { Filter } from '../components/Filter/Filter'\nimport css from '../components/ContactForm/ContactForm'\n\nconst ContactPage = () => {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(selectContacts);\n\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <h1 className={css.ptitle}>Phonebook</h1>\n      <ContactForm />\n\n      <h2 className={css.ctitle}>Contacts</h2>\n      \n      <Filter />\n      {contacts.length !== 0 && <ContactList />}\n      \n    </div>\n  );\n};\n\nexport default ContactPage;"],"names":["ContactList","dispatch","useDispatch","contacts","useSelector","selectFilterContact","_jsx","className","css","children","map","contact","_jsxs","name","number","type","onClick","deleteContact","id","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","setNumber","selectContacts","handleInputChange","event","_event$target","target","value","onSubmit","preventDefault","some","alert","concat","addContact","htmlFor","onChange","pattern","title","required","Filter","selectFilter","filterUser","currentTarget","useEffect","fetchContacts","ContactForm","length"],"sourceRoot":""}